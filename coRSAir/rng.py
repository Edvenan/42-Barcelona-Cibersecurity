
from Crypto.PublicKey import RSA
from cryptography.hazmat.primitives import serialization



n = 146162993582921807381683018088111565603506954189468271998863032884583087668828227517021359570023475466312440293312149400604293079119484342586683406361798758744709100580799775832717040923452131314993043044025196060906900080741305825223288577054565664034331863477512214203449815958698517366890485107227899018643
p = 55
q = n//p
print(q)
print(n==(p*q))
d = 8399069744316699369812750753312299251763235874048819939083543370055692328925753464899254469089345081497972903010719969523715881654088194976600236635160810443053876878150142495396419540460751531375548401864295537998226459940177008471472598128242172084020716169409875306785936957274217529501372767337378156737
e = 65537

rsa_key = RSA.construct((n, e, d, p, q), consistency_check=True)

public_key = serialization.load_pem_public_key(rsa_key)
public_key = serialization.load_pem_private_key(rsa_key)




